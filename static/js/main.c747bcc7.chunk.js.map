{"version":3,"sources":["components/Search.js","images/Pet-food.png","components/AddAppointments.js","components/AppointmentInfo.js","App.js","index.js"],"names":["DropDown","toggle","orderBy","onOrderByChange","sortBy","onSortByChange","className","role","aria-orientation","aria-labelledby","onClick","Search","query","onQueryChange","useState","toggleSort","setToggleSort","htmlFor","type","name","id","value","onChange","event","target","placeholder","aria-haspopup","aria-expanded","mySort","AddAppointment","onSendAppointment","lastId","clearData","ownerName","petName","aptDate","aptTime","aptNotes","toggleForm","setToggleForm","formData","setFormData","rows","appointmentInfo","AppointmentInfo","appointment","onDeleteAppointment","App","appointmentList","setAppointmentList","setQuery","setSortBy","setOrderBy","filteredAppointments","filter","item","toLowerCase","includes","sort","a","b","order","fetchData","useCallback","fetch","then","response","json","data","useEffect","src","pic","alt","AddAppointments","myAppointment","reduce","max","Number","myQuery","map","appointmentId","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c747bcc7.chunk.js","sourcesContent":["import {BiSearch, BiCaretDown} from \"react-icons/bi\"\r\nimport {FcCheckmark} from \"react-icons/fc\"\r\nimport {useState} from 'react';\r\n\r\n\r\n//Este es el componente que se despliega en sort by \r\nconst DropDown =({toggle, orderBy, onOrderByChange, sortBy, onSortByChange}) =>{\r\n    //Si toggle es falso (toggle es la variable creada en el componente Search igualado a toggleSort) entonces retorne null\r\n    if(!toggle){\r\n        return null;\r\n    }\r\n    return(\r\n        /*\r\n        - origin-top-rigth: transform-origin: top right (me permite cambiar la posición de los elementos transformados)\r\n        transform-origin: x-axis, y-axis\r\n        - absolute: position absolute -> esto lo que hace es posicionar un elemento fuera del flujo normal del documento \r\n        causando así que sus elementos vecinos actuen como si este no existiera.\r\n        - rounded-md: border-radius: 0.375rem\r\n        */\r\n        <div className=\"origin-top-right absolute right-0 mt-2 w-56\r\n            rounded-md shadow-lg bg-white ring-1 ring-black ring-opacity-5\">\r\n            {/*\r\n            - py-1: padding-top: 0.25rem, padding-bottom:0.125rem \r\n            */}    \r\n            <div className=\"py-1\" role=\"menu\" aria-orientation=\"vertical\" aria-labelledby=\"options-menu\">\r\n            {/* \r\n            - px-4: padding-left: 1rem, padding-right:1rem \r\n            - text-sm: font-size: 0.875rem, line-height: 1.25rem;\r\n            */}\r\n            <div onClick = {() => onSortByChange('petName')} \r\n                className=\"px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 hover:text-gray-900 flex justify-between cursor-pointer\"\r\n                role=\"menuitem\">Pet Name {(sortBy) === 'petName' && <FcCheckmark />}</div>\r\n            <div onClick = {() => onSortByChange('ownerName')} \r\n                className=\"px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 hover:text-gray-900 flex justify-between cursor-pointer\"\r\n                role=\"menuitem\">Owner Name  {(sortBy) === 'ownerName' && <FcCheckmark />}</div>\r\n            <div onClick = {() => onSortByChange('aptDate')} \r\n                className=\"px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 hover:text-gray-900 flex justify-between cursor-pointer\"\r\n                role=\"menuitem\">Date {(sortBy) === 'Date' && <FcCheckmark />}</div>\r\n            <div onClick = {() => onOrderByChange('asc')} \r\n                className=\"px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 hover:text-gray-900 flex justify-between cursor-pointer border-gray-1 border-t-2\"\r\n                role=\"menuitem\">Asc {(orderBy) === 'asc' && <FcCheckmark />}</div>\r\n            <div onClick = {() => onOrderByChange('desc')} \r\n                className=\"px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 hover:text-gray-900 flex justify-between cursor-pointer\"\r\n                role=\"menuitem\">Desc {(orderBy) === 'desc' && <FcCheckmark />}</div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n//Este es mi componente de la barra de búsqueda\r\nconst Search = ({query, onQueryChange, sortBy, onSortByChange, orderBy, onOrderByChange}) => {\r\n    let [toggleSort, setToggleSort] = useState(false)\r\n    return (\r\n        //- py-5: padding-top:1.25rem, padding-bottom:1.25rem \r\n        <div className=\"py-5\">\r\n            <div className=\"mt-1 relative rounded-md shadow-sm\">\r\n                {/*\r\n                -inset-y-0: esto es top:0px, bottom:0px\r\n                -pl-3: padding-left: 0.75rem \r\n                -pointer-events-none: Hace que un elemento ignore los eventos de pointer.\r\n                */}\r\n                <div className=\"absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none\">\r\n                    <BiSearch />\r\n                    <label htmlFor=\"query\" className=\"sr-only\" />\r\n                </div>\r\n                {/*con el atributo onChange se puede escuchar a nuestro input\r\n                   y obtienes el valor del input usando event.target.value, \r\n                   entonces lo que se hace aquí al final es obtener el valor\r\n                   ingresado en el input */}\r\n                <input type=\"text\" name=\"query\" id=\"query\" value={query}\r\n                    onChange={(event) => {onQueryChange(event.target.value)}}\r\n                    className=\"pl-8 rounded-md focus:ring-indigo-500 focus:border-indigo-500 block w-full sm:text-sm border-gray-300\" placeholder=\"Search\" />\r\n                <div className=\"absolute inset-y-0 right-0 flex items-center\">\r\n                    <div>\r\n                    {/*\r\n                    -px-4: padding-left: 1rem, padding-right:1.25rem\r\n                    -ml-2: margin-left:0.5rem \r\n                    Básicamente lo que hace el método setToggleSort es cambiar el estado \r\n                    de nuestra variable toggleSort \r\n                    */}\r\n                    <button type=\"button\" onClick = {() => setToggleSort(!toggleSort)}\r\n                        className=\"justify-center px-4 py-2 bg-blue-500 border-2 border-blue-400 text-sm text-white hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 flex items-center\" id=\"options-menu\" aria-haspopup=\"true\" aria-expanded=\"true\">\r\n                        Sort By <BiCaretDown className=\"ml-2\" />\r\n                    </button>\r\n                    <DropDown toggle = {toggleSort}\r\n                        sortBy={sortBy}\r\n                        onSortByChange = {mySort => onSortByChange(mySort)}\r\n                        orderBy = {orderBy}\r\n                        onOrderByChange = {mySort => onOrderByChange(mySort)}\r\n                    />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n      </div>\r\n    );\r\n}\r\n\r\nexport default Search;","export default __webpack_public_path__ + \"static/media/Pet-food.5d335535.png\";","import {BiCalendar} from 'react-icons/bi';\r\nimport {useState} from 'react';\r\n\r\nconst AddAppointment = ({onSendAppointment, lastId}) => {\r\n    //Método que inicializa nuestras variables en vacío\r\n    const clearData ={\r\n        ownerName : '', \r\n        petName: '',\r\n        aptDate: '', \r\n        aptTime: '', \r\n        aptNotes: ''\r\n    }\r\n\r\n    {/* this is what's going to allow our application to show or hide the rest of the form*/}\r\n    let [toggleForm, setToggleForm] = useState(false)\r\n    {/*Creamos unas variables para manejar las citas añadidas (add appointment),\r\n    el estado inicial de estas es vacio como lo indica clearData*/}\r\n    let [formData, setFormData] = useState(clearData)\r\n\r\n    function formDataPublish(){\r\n        //Creamos un objeto appointmentInfo\r\n        const appointmentInfo = {\r\n            id: lastId + 1,\r\n            ownerName : formData.ownerName, \r\n            petName: formData.petName,\r\n            aptDate: formData.aptDate + ' '+ formData.aptTime, \r\n            aptNotes: formData.aptNotes\r\n        }\r\n        //Se usa el método que añadirá la información a nuestro objeto\r\n        onSendAppointment(appointmentInfo)\r\n        //Esto hace que se limpien los datos del formulario\r\n        setFormData(clearData)\r\n        //esconde el formulario\r\n        setToggleForm(!toggleForm)\r\n    }\r\n\r\n    return(\r\n        <div>\r\n            {/*\r\n            -bg-blue-400: Creación de un botón con color blue-400 (estos colores están listados en la \r\n                página de la documentación de tailwindcss)\r\n            -rounded-t-md: border-top-left-radius: 0.375rem; border-top-right-radius: 0.375rem;\r\n            */}\r\n            {/*necesitamos crear un evento para el botón, al clickear se ejecuta un arrow function, \r\n            el cual usa el método setToggleForm y setea el estado del toggleform a lo opuesto que esta nuestro toggleForm\r\n            \r\n            -- Revisa el estado del toggleForm si es true entonces nuestro button tiene estilo rounded-t-md \r\n            si no este será rounded-md\r\n            */}\r\n            <button onClick = {() => {setToggleForm(!toggleForm)}} \r\n                className={`bg-blue-500 hover:bg-blue-600 text-white px-2 py-3 min-w-full text-center rounded-t-md\r\n                ${toggleForm ? 'rounded-t-md' : 'rounded-md'}`}>\r\n                <div><BiCalendar className=\"inline-block align-text-top pl-5\" /> Add Appointment</div>\r\n            </button>\r\n            {   \r\n                //check for the toggle form and if it exists display the form \r\n                toggleForm  && \r\n                <div className=\"border-r-2 border-b-2 border-l-2 border-light-blue-500 rounded-b-md pl-4 pr-4 pb-4\">\r\n                    <div className=\"sm:grid sm:grid-cols-3 sm:gap-4 sm:items-start  sm:pt-5\">\r\n                        <label htmlFor=\"ownerName\" className=\"block text-sm font-medium text-gray-700 sm:mt-px sm:pt-2\">\r\n                        Owner Name\r\n                        </label>\r\n                        <div className=\"mt-1 sm:mt-0 sm:col-span-2\">\r\n                        <input type=\"text\" name=\"ownerName\" id=\"ownerName\"\r\n                            /*Se añade un onChange en el input del dueño de la mascota, donde se obtiene el valor \r\n                            del input que estamos tratando, lo que se hace es usar el método setFormData y si algo cambia en alguno de\r\n                            los campos input del formulario entonces se accederá a toda esa información */\r\n                            onChange={(event) => {setFormData({...formData, ownerName: event.target.value})}}\r\n                            value = {formData.ownerName}\r\n                            className=\"max-w-lg block w-full shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:max-w-xs sm:text-sm border-gray-300 rounded-md\" />\r\n                        </div>\r\n                    </div>\r\n            \r\n                    <div className=\"sm:grid sm:grid-cols-3 sm:gap-4 sm:items-start  sm:pt-5\">\r\n                        <label htmlFor=\"petName\" className=\"block text-sm font-medium text-gray-700 sm:mt-px sm:pt-2\">\r\n                        Pet Name\r\n                        </label>\r\n                        <div className=\"mt-1 sm:mt-0 sm:col-span-2\">\r\n                        <input type=\"text\" name=\"petName\" id=\"petName\"\r\n                            onChange={(event) => {setFormData({...formData, petName: event.target.value})}}\r\n                            value = {formData.petName}                        \r\n                            className=\"max-w-lg block w-full shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:max-w-xs sm:text-sm border-gray-300 rounded-md\" />\r\n                        </div>\r\n                    </div>\r\n    \r\n                    <div className=\"sm:grid sm:grid-cols-3 sm:gap-4 sm:items-start  sm:pt-5\">\r\n                        <label htmlFor=\"aptDate\" className=\"block text-sm font-medium text-gray-700 sm:mt-px sm:pt-2\">\r\n                        Apt Date\r\n                        </label>\r\n                        <div className=\"mt-1 sm:mt-0 sm:col-span-2\">\r\n                        <input type=\"date\" name=\"aptDate\" id=\"aptDate\"\r\n                            onChange={(event) => {setFormData({...formData, aptDate: event.target.value})}}\r\n                            value = {formData.aptDate}                         \r\n                            className=\"max-w-lg block w-full shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:max-w-xs sm:text-sm border-gray-300 rounded-md\" />\r\n                        </div>\r\n                    </div>\r\n            \r\n                    <div className=\"sm:grid sm:grid-cols-3 sm:gap-4 sm:items-start  sm:pt-5\">\r\n                        <label htmlFor=\"aptTime\" className=\"block text-sm font-medium text-gray-700 sm:mt-px sm:pt-2\">\r\n                        Apt Time\r\n                        </label>\r\n                        <div className=\"mt-1 sm:mt-0 sm:col-span-2\">\r\n                        <input type=\"time\" name=\"aptTime\" id=\"aptTime\"\r\n                            onChange={(event) => {setFormData({...formData, aptTime: event.target.value})}}\r\n                            value = {formData.aptTime} \r\n                            className=\"max-w-lg block w-full shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:max-w-xs sm:text-sm border-gray-300 rounded-md\" />\r\n                        </div>\r\n                    </div>\r\n            \r\n                    <div className=\"sm:grid sm:grid-cols-3 sm:gap-4 sm:items-start  sm:pt-5\">\r\n                        <label htmlFor=\"aptNotes\" className=\"block text-sm font-medium text-gray-700 sm:mt-px sm:pt-2\">\r\n                        Appointment Notes\r\n                        </label>\r\n                        <div className=\"mt-1 sm:mt-0 sm:col-span-2\">\r\n                        <textarea id=\"aptNotes\" name=\"aptNotes\" rows=\"3\"\r\n                            onChange={(event) => {setFormData({...formData, aptNotes: event.target.value})}}\r\n                            value = {formData.aptNotes}                         \r\n                            className=\"shadow-sm focus:ring-indigo-500 focus:border-indigo-500 mt-1 block w-full sm:text-sm border-gray-300 rounded-md\" placeholder=\"Detailed comments about the condition\"></textarea>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"pt-5\">\r\n                        <div className=\"flex justify-end\">\r\n                        {/*Cuando se presione el boton submit, este ejecutará la función formDataPublish*/}\r\n                        <button type=\"submit\" onClick={formDataPublish} className=\"ml-3 inline-flex justify-center py-2 px-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-blue-400 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-400\">\r\n                            Submit\r\n                        </button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            }\r\n      </div>\r\n    );\r\n}\r\n\r\nexport default AddAppointment;","import {BiTrashAlt} from \"react-icons/bi\";\r\n\r\n//Este componente es el que contiene la información \r\n// que se encuentra en nuestro data.json\r\nconst AppointmentInfo = ({appointment, onDeleteAppointment}) =>{\r\n    return(\r\n        //items-start: este sirve para alinear los items al inicio del contenedor  \r\n        <li className=\"px-3 py-3 flex items-start\">\r\n            {/*p-1.5: padding 1.5*/}\r\n            <button onClick = {() => onDeleteAppointment(appointment.id)}type=\"button\"\r\n            className=\" p-1.5 mr-1.5 mt-1 rounded text-white bg-red-400 hover:bg-gray-800 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500\">\r\n            <BiTrashAlt /></button>\r\n            {/*flex-grow: se usa cuando se quiere que el elemento llene todo el espacio disponible*/}\r\n            <div className=\"flex-grow\">\r\n                <div className=\"flex items-center\">\r\n                    <span className=\"flex-none font-medium text-2xl text-blue-900\">{appointment.petName}</span>\r\n                    <span className=\"flex-grow text-right\">{appointment.aptDate}</span>\r\n                </div>\r\n                <div><b className=\"font-bold text-blue-900\">Owner:</b> {appointment.ownerName}</div>\r\n                {/*leading tight: line height 1.25*/}\r\n                <div className=\"leading-tight\">{appointment.aptNotes}</div>\r\n            </div>\r\n        </li>\r\n    )\r\n}\r\n\r\nexport default AppointmentInfo;\r\n\r\n\r\n","import {useState , useEffect, useCallback} from 'react'; \nimport {BiCalendar} from \"react-icons/bi\";\nimport Search from \"./components/Search\";\nimport pic from \"./images/Pet-food.png\"\nimport AddAppointments from \"./components/AddAppointments\";\nimport AppointmentInfo from \"./components/AppointmentInfo\";\n\nfunction App() {\n\n  //Hacemos uso de nuestro hook useState \n  let[appointmentList, setAppointmentList] = useState([]);\n  let[query, setQuery] = useState(\"\");\n  let[sortBy, setSortBy] = useState(\"petName\");\n  let[orderBy, setOrderBy] = useState(\"asc\");\n\n  /*se crea un array con los nombres de las \n    mascotas, el nombre de su dueño y las notas, este se denomina filteredAppointments\n  */\n  const filteredAppointments = appointmentList.filter(\n    item => {\n      return (\n        item.petName.toLowerCase().includes(query.toLowerCase()) ||\n        item.ownerName.toLowerCase().includes(query.toLowerCase()) ||\n        item.aptNotes.toLowerCase().includes(query.toLowerCase())\n      )\n    }\n    /*Entonces lo que se va a hacer a continuación es ordenar el array teniendo en cuenta \n    los nombres de las mascotas, entonces lo que se hace es declarar la variable order como orderBy = asc,\n    si esta en orden ascendente entonces order = 1, de lo contrario será -1, luego lo que se hace es \n    comparar dos nombres de mascotas entre ellas y se returna -1 * order o de lo contrario retornará 1 * order.\n    \n    Básicamente a y b son arrays enteros, y el sortBy lo que esta haciendo es usar el petName, entonces\n    esto es lo que permite realizar las comparaciones entre ellos. */\n  ).sort((a,b)=> {\n    let order = (orderBy === 'asc') ? 1 : -1;\n    return (\n      a[sortBy].toLowerCase() < b[sortBy].toLowerCase() \n      ? -1 * order: 1 * order \n    )\n  })\n\n  /*Creamos el método de fetch data donde vamos a hacer la petición de nuestros \n    datos usando useCallBack el cual es otro hook \n  \n    Este hook permite memorizar la funcion que le pasemos como argumento, devolviendo\n    siempre la misma instancia hasta que cambie alguna de las dependencias. Este es uno \n    de los hooks que optimiza\n\n    La función fetch devuelve un objeto promise conteniendo la respuesta, un objeto \n    response (se usa el método json() para extraer el contenido)\n  */\n  const fetchData = useCallback(() => {\n    fetch('./data.json')\n    .then(response => response.json())\n    .then(data => { \n      // do something with your data\n      setAppointmentList(data)\n    });\n  }, [])\n\n\n  /*Con el hook useEffect podremos ejectutar código cada vez que nuestro \n  componente se renderice, ya sea por una actualización o sea la primera vez*/\n  useEffect(() => {\n    fetchData()\n  }, [fetchData]);\n\n  return (\n    /* para centrar un container (setea un max width de un elemento) se usa mx-auto\n    luego se añade un margin top de 3px y un font weigth de 100*/\n    <div className=\"App container mx-auto my-auto px-10 py-6 font-thin px-10 bg-white\">\n      {/*text-5xl asigna un font-size de 3rem y un line-heigh:1 \n      elementos en linea (inline-block )*/}\n      <div className=\"flex justify-between items-center\tmx-auto \">\n        <h1 className=\"text-5xl mb-5 w-max\" >\n          <BiCalendar  className=\"inline-block text-red-400 align-top text-center\"/>Your appointments </h1>\n          <img className=\"w-44 overflow-hidden\" src={pic} alt=\"pet-image\"/>\n      </div>\n\n        {/*Hacemos el llamado a nuestro componente AddAppointments*/}\n        <h2 className=\"text-2xl text-left ml-2 mb-2\">Set your pet's appointment right here</h2>\n        <AddAppointments\n          //Método encargado de enviar a la lista de citas la información insertada por el usuario\n          onSendAppointment = {myAppointment => setAppointmentList([...appointmentList, myAppointment])}\n          lastId={appointmentList.reduce((max, item) => Number(item.id) > max ? Number(item.id) : max, 0)}\n        />\n        {/*Hacemos el llamado a nuestro primer componente Search\n          Además de esto se hace uso de la función onQuery change que \n          recibe un query query y setea su estado\n        */}\n        <Search query={query} \n        onQueryChange = {myQuery => setQuery(myQuery)}\n        orderBy={orderBy}\n        onOrderByChange={mySort => setOrderBy(mySort)}\n        sortBy = {sortBy}\n        onSortByChange = {mySort => setSortBy(mySort)}\n        />\n        {/*Se crea un ul y dentro de este a la lista que hemos importado se mapea por los elementos que se encuentran en nuestra data.json */}\n        <ul className= \"divide-y divide-gray-200\">\n          {filteredAppointments.map(appointment => (\n            <AppointmentInfo key={appointment.id}\n            appointment={appointment}\n            /* \n            La función filter crea un nuevo array con todos los elementos que cumplan con \n            la condición implementada por la función dada.\n\n            La función OnDeleteAppointment recibe un id, a partir de aquí lo que se hace es \n            revisar que el id dado no coincida con los id pertenecientes al data.json, \n            luego de esto la función filter crea un nuevo array con los elementos que cumplan con \n            esa condición es decir todos los que no quieran ser eliminados y por ultimo \n            se setea nuestro appointmentList original con esos valores.\n            */\n            onDeleteAppointment ={\n              appointmentId => \n              setAppointmentList(appointmentList.filter(appointment => \n                appointment.id !== appointmentId))\n            }\n            />\n          ))\n          }\n        </ul>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\n//Renderización de mis componentes\nReactDOM.render(\n  <React.StrictMode >\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n\n"],"sourceRoot":""}